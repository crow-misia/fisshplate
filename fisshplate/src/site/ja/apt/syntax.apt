  ---
  文法ガイド
  ---
  rokugen
  ---
  2008/01/10

目次

  * {{{##foreach}#foreach}}

  * {{{##if}#if}}

  * {{{##pageBreak}#pageBreak}}
 
  * {{{##pageHeaderStart}#pageHeaderStart}}
  
  * {{{##pageFooterStart}#pageFooterStart}}
  
  []
  
基本ルール
  
  * 制御文は必ず「A列」に書いて下さい。他の列に書くと、通常のセルの値としてそのまま出力されます。
  
  * 「A列」に制御文がある場合、その行の「B列」以降は出力されません。
    
{#foreach}

  取得したデータの一覧をExcelに出力する場合などに使います。ブロック要素なので、必ず「#end」で閉じる必要があります。
  
* 構文

+--
#foreach var : list index=indexname max=maxrowcount
[繰り返す行]
#end
+--

  [list] 要素の集合データの名前です。データはListと配列をサポートしています。
  
  [var] 上記listの各要素を受け取る変数名です。
  
  [indexname] ループ内で参照する、ループインデックス名です。0スタートになります。これは必須ではありません。
  指定しない場合、「index」で参照する事が出来ます。
  
  [maxrowcount] ループの最大回数です。データの件数がこれに満たない場合、満たすまで空データを埋め込んだ行を出力します。
  これは必須ではありません。指定しない場合はデータ件数通りの行数を出力します。

* 例
  
  テンプレートを作ります。
  
[images/foreach01.png]

  Java側でデータを設定します。
  
+--
public class Foo{
    private String name;
    private int num;
    A(String name, int num){
        this.name = name;
        this.num = num;           
    }
    (setter、getter省略)
}
+--

+---
Map map = new HashMap();
List list = new ArrayList();
list.add(new A("1行目",10));
list.add(new A("2行目",20));
list.add(new A("3行目",30));
list.add(new A("4行目",10));
list.add(new A("5行目",20));
list.add(new A("6行目",30));
map.put("fooList", list);
+---

  この場合、出力ファイルは以下の様になります。
  
[images/foreach02.png]

  「index=idx」を省略する事が出来ます。その場合、ループインデックスは「index」という名前で参照します。
  
[images/foreach03.png]

  出力結果は同じです。
  
  「max=maxrowcount」を書くと、空行を出力する事が出来ます。罫線など書式をともなった行数固定の表などを出力するのに有効です。

[images/foreach04.png]

  テンプレートにこう書いた場合、出力されるファイルは以下の様になります。

[images/foreach05.png]

** ループのネストと注意

  ループはネストする事が出来ます。その場合、ループ内でループインデックスを参照する場合は、必ず各ループで「index=」を指定して下さい。
  指定しないと、ネストしたループでインデックスが共有されてしまうからです。
  
  ループインデックスを参照する必要がない場合は、省略しても構いません。  

{#if}

  ある条件によって、行の出力をする場合に使います。ブロック要素なので、必ず「#end」で閉じる必要があります。
  
* 構文

+--
#if ([条件式])
[出力する行]
#else if ([条件式])
[出力する行]
#else
[出力する行]
#end
+--

  条件式はOGNLで評価されます。「#else if」と「#else」は任意です。
  
* 例

  テンプレートを作ります。{{{##foreach}#foreach}}と併用してみます。
  
[images/if01.png]

  ループの中で、インデックスが奇数の場合、背景色を水色にかえて、縞模様で出力するようにしています。
  
  {{{##foreach}#foreach}}の例と同じデータを埋め込むと出力結果はこうなります。
  
[images/if02.png]

  また、「#else if」を使って、下記のようなテンプレートを作った場合は
  
[images/if03.png]

  同データでの出力結果はこの様になります。
  
[images/if04.png]

{#pageBreak}

  この位置に改ページを挿入します。「#pageHeader」か「#pageFooter」が指定されている場合は、それぞれを出力します。
  
*例

  ここでは、後述する{{{##pageHeaderStart}#pageHeaderStart}}と{{{##pageFooterStart}#pageFooterStart}}と合わせて使用してみます。
  
  テンプレートにこのように記述するとします。
  
[images/pagebreak01.png]

  4行ごとに改ページを強制的に挿入するようになっており、ヘッダとフッタを指定してあります。

  データを埋め込むとこうなります。
  
[images/pagebreak02.png]
  

{#pageHeaderStart}

  「#pageBreak」により改ページが挿入された際に、ヘッダとして出力されるブロックを指定します。ブロック要素なので、必ず「#end」で閉じる必要があります。
  
  EXCELの印刷設定により改ページした場合には出力されません。また、ここでのヘッダとは通常のセルの事ですので、EXCELの印刷設定でのヘッダ設定とは関係りません。

* 構文

+--
#pageHeaderStart
[出力する行]
#end
+--

  ヘッダは1つのシートに1つだけ指定する事が出来ます。ある条件でヘッダの内容を変えたい場合は、ブロック内で{{{##if}#if}}を使って切り替えます。


  例えば、偶数ページと奇数ページでヘッダを切り替える場合は下記のように記述します。
    
+--
#pageHeaderStart
#if(page.pagenum%2 == 0)
[奇数ページに出力する行]
#else
[偶数ページに出力する行]
#end
#end
+--

{#pageFooterStart}
  
  「#pageBreak」により改ページが挿入された際に、フッタとして出力されるブロックを指定します。ブロック要素なので、必ず「#end」で閉じる必要があります。
  
  EXCELの印刷設定により改ページした場合には出力されません。また、ここでのフッタとは通常のセルの事ですので、EXCELの印刷設定でのフッタ設定とは関係ありません。
  
* 構文

+--
#pageFooterStart
[出力する行]
#end
+--
  
  フッタは1つのシートに1つだけ指定する事が出来ます。ある条件でフッタの内容を変えたい場合は、{{{##pageHeaderStart}#pageHeaderStart}}と同様に、{{{##if}#if}}で切り替えます。
  詳細は{{{##pageHeaderStart}#pageHeaderStart}}を参照して下さい。